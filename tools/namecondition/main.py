import sqlite3
import os
import requests
from pathlib import Path


SCRIPT_DIR = str(Path(__file__).parent.absolute()) + "/"
DB_DIR = SCRIPT_DIR + "../../CDB/"
TARGET_FILE = SCRIPT_DIR + "../../lib/namecondition.py"


def findMainId(card):
    if card['name'] == "Dark Magician":
        return 46986414

    def f(e): return e['id']
    ids = map(f, card['card_images'])
    mainId = min(ids)
    return mainId


def hasOfficialCards(db):
    whitelist = [
        "cards.cdb",
        "cards.delta.cdb"
    ]

    return db in whitelist


def fetchFromDB():
    databases = os.listdir(DB_DIR)
    databases = filter(lambda f: f.endswith(".cdb"), databases)
    databases = filter(lambda f: hasOfficialCards(f), databases)
    databases = list(databases)

    cards = []
    encountered = {
        36996508, # Dark Magician
        27847700, # Polymerization
    }

    for db in databases:
        dbPath = DB_DIR + db
        with sqlite3.connect(dbPath) as con:
            cursor = con.cursor()
            sql = """SELECT datas.id, datas.alias, texts.name FROM datas INNER JOIN texts ON datas.id = texts.id WHERE datas.alias != 0 ORDER BY texts.name"""
            cursor.execute(sql)
            rows = cursor.fetchall()
            for row in rows:
                id = row[0]
                alias = row[1]
                name = row[2].strip()

                if abs(id - alias) > 10 and "Token" not in name and not id in encountered:
                    cards.append({"id": id, "name": name, "alias": alias})
                    encountered.add(id)

    return cards


def fetchDatesFromAPI(cards):
    ids = map(lambda c: str(c["id"]), cards)

    url = "https://db.ygoprodeck.com/api/v7/cardinfo.php"

    params = {
        "format": "tcg",
        "misc": "yes",
        "id": ",".join(ids),
    }

    r = requests.get(url, params=params)
    if not r.ok:
        print("Request failed")
        print(r.text)
        exit(1)

    dates = dict()

    for card in r.json()["data"]:
        id = findMainId(card)
        for entry in card["misc_info"]:
            if "tcg_date" in entry:
                dates[id] = entry["tcg_date"]
    return dates


def find():
    cards = fetchFromDB()
    dates = fetchDatesFromAPI(cards)

    for card in cards:
        card["releasedate"] = dates[card["id"]]

    cards.sort(key=lambda c: c["releasedate"])
    return cards

def writeToFile(cards):
    lines = "\n"
    for card in cards:
        lines += "    " + str(card) + ",\n"
    s = f"""\
# autogenerated
cards = [{lines}]
"""
    print(s)
    with open(TARGET_FILE, "w") as f:
        f.write(s)


cards = find()
writeToFile(cards)
